/*!
@page capture:strategy:motivation Motivating the capture_strategy template parameter.

Mock functions (and particularly template mock functions) require
us to capture argument lists of unknown types.  Moreover, depending
on the intended usage, the tester may want to operate on the
captured arguments, such as counting how many arguments match some
values, or how many argument match certain types, or even may need
to examine the values of the capture.

In more dynamic languages than C++ this can be perfomed by holding
on to the arguments, or to objects that wrap the arguments if
needed.  Then using duck typing one can call on the objects.  But
just expressing the type "a vector of heterogenous things" is not
trivial in C++.  Notice that we say not trivial, one can use void*,
or boost::any and make it work.

It is not too difficult to design a class that captures
heteronegous tuples.  Just wrap the tuples in class template all
with a common base, as in:

@code
class base { .... };

template<typename tuple> tuple_holder<tuple> : public base { ... };
@endcode

This works in that the values are captured (except for non-copyable
objects, more or this later), but does not provide a good way to
operate on the values.  Using some dynamic polymorphism, combined
with RTTI one can at least get comparisons working for to implement
things like with() filters:

@code
bool tuple_holder<tuple>::compare(base const * other) const override {
  auto rhs = dynamic_cast<tuple_holder<tuple> const*>(other);
  if (rhs == nullptr) { return false; }
  // compare tuples as usual!
}
@endcode

Boost.ASIO provides another interesting motivation.  In this
framework one often receives callbacks when an operation completes:

@code
socket s;
my_object foo;

boost::asio::async_read_until(s, some_buffer, '\n',
  [foo](boost::system::error_code const & ec) {
    foo.my_callback(ec);
  });
@endcode

writing tests for @em my_object requires mocking the socket class,
as in:

@code
class mock_socket {
  mock_function_type_to_be_defined async_write_some;
};
// .. more stuff ...
mock_socket s;
my_object foo;

boost::asio::async_read_until(s, some_buffer, '\n',
  [foo](boost::system::error_code const & ec) {
    foo.my_callback(ec);
  });
@endcode

Boost.ASIO will call s.async_write_some more or less like this:

@code
s.async_write_some(some arguments ..., functor);
@endcode

One must call the functor provided to exercise the code in the
my_object class.

In this case one would want to capture the functors in a separate
sequence of object.  The functors have signatures known at compile
time, and it would be desirable to make them available wrapped in
classes with nice virtual functions.

The argument_argument_capture_strategy defines how a
mock_template_function captures its arguments.  The default
template parameter value simple captures the arguments by value,
replacing non-copyable arguments with a placeholder.
*/